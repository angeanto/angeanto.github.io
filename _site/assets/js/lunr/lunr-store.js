var store = [{
        "title": "Welcome to my data playground!",
        "excerpt":"   Introduction  So‚Ä¶this is my first blog post and if you read this now, I‚Äôm really glad you‚Äôre here. This is my data playground and I‚Äôm going to talk about data, business intelligence, data science, machine learning, big data and all this cool great stuff everyone talks about. I‚Äôm just another person with an opinion, but hopefully i‚Äôll defend it with some data. As this is my first post I‚Äôll tell you just a little about me.   About me  Working with data and talking for all this kind of stuff, really delights me. I try to be into as much as possible components of data analytics, from data engineering to data visualization. I really enjoy returning value to the business, enabling data mindsets, help people think of data, share best practices and in general everything that helps people optimize the way they work with data. We are also organising Athens Tableau User Group meetups with the rest of the team, inviting enthousiastic speakers, having the opportunity to connect with other data rockstars like you either  in person or online.           1st in person Athens Tableau User Group Meetup  Why  So I started content sharing on LinkedIn and then really liked the idea of creating a blog. I didn‚Äôt know which is the best option to start, the goal was to communicate my thoughts. This data playground aims to become a place where I can share my thoughts and opinions, interesting implementations and tips. The idea is to cover topics related with the Business Intelligence stack from a tech perspective and talk about:     BI Tools   SQL   Python/R   Cloud   plus anything that matters when it comes to interact with data such as:     Effective communication   Storytelling   Business understanding   It would be nice reaching out to me with any topics and ideas you feel is meaningful to write about.  How  Some good news is that it turns out that starting a blog is much easier than you think. The website is created with Jekyll using minimal mistakes theme where you can transform your plain text into static websites and blogs. I used Github Pages which hosts it directly from the GitHub repository. Like Github Pages mentions     Just edit, push, and the changes are live.    It was cool and easy to modify the code, understand the logic behind Jekyll, setup Algolia, setup Netlify for search, setup Google Analytics, deploy it to Github Pages and finally go live. It also made me to practice HTML and CSS since my Masters. I suppose it‚Äôs the perfect opportinity to get more familiar with SEO, tags, and front end in general.  The website repo is public.   Follow me on LinkedIn, where I already share some content. Some of it will be archived here soon. Hope to like it and keep in touch!   Antonis  ","categories": [],
        "tags": ["general"],
        "url": "/Welcome-to-my-data-playground/",
        "teaser": null
      },{
        "title": "Run python scripts and use output tables with Tableau Table Extension",
        "excerpt":"Why   Suppose working in a Tableau workbook and need to make some operations that either are impossible with Tableau or a bit hard. You realise that it would be achieved more easily, in a straightforward and readable way by using some Python code. Another case could be to make some predictions inside the workbook by running a simple scikit-learn model. You want the model to run everytime the data is refreshed. Available in Tableau 2022.3, Table Extensions allow you to create new data tables with an analytics extensions script. We can write a custom Python script using TabPy and optionally add one or more input tables. Using Table Extensions, you can unlock new data and transform, augment, score, or otherwise modify our data using Analytics Extensions like Python, R, and Einstein Discovery.   Note: Table extensions differs from writing code directly as Tableau calculated fields. It unlocks the capability to use a table in the tableau data model as output after some Python processing.   Setup &amp; Configuration  Let‚Äôs start cooking üßë‚Äçüç≥.   Python  First, download Python from here.   Tableau Desktop  Next, download Tableau Desktop(&gt;= 2022.3 version). We‚Äôll NOT use Tableau Server for this example.   Tabpy  TabPy(the Tableau Python Server) is an Analytics Extension implementation that expands Tableau‚Äôs capabilities by allowing users to execute Python scripts and use the output either in a calculated field or as table extension.  To install TabPy using pip, run:    pip install tabpy  and to start the server run:   tabpy    The desired output is something like this:        By navigating to localhost:9004 ensure that the server is running successfully.       We are now ready to taste our food ü•Ñ.   The Actual Thing  We‚Äôll use the Sample - Superstore dataset to build 5 clusters with Quantity,Discount,Profit variables.   Connection   By navigating to Settings and Performance and selecting Manage Analytics Extension Connection connect with the python server.     Data pane  We can now select any of the existing tables from our connections and notice that when a table is dragged into the pane the input table and output table selections appear in the bottom.We also can insert our script.     Note: The image used above contains code and schema from another example.   Our output table is shown as Table extension.In Script, enter your script, select Apply and choose Update. Now and the results will appear in the Output Table tab. When the code runs, the output table will include any new columns from the returned python dictonary. The new column cluster has been created.     Code  The script contains the code below.   import libraries import pandas as pd  import numpy as np from sklearn.preprocessing import StandardScaler, MinMaxScaler from sklearn.cluster import KMeans #Convert tableau imported table to pandas df arg1 = pd.DataFrame.from_dict(_arg1) #Fit K-Means kmeans = KMeans(n_clusters=5,  random_state=0).fit(     arg1[['Quantity','Discount','Profit']]) #Get cluster assignment labels labels = kmeans.labels_ #Format results as a DataFrame results = pd.DataFrame([labels]).T #Rename column results.rename(columns={0: 'cluster', }, inplace=True) #Join to main dataframe orders_clusters = pd.concat(     [arg1, results], axis=1) #Return table as dictionary return orders_clusters.to_dict(orient='list')   Clusters  We can now visualize our clusters. In the Distribution worksheet, we can say hello.   The Discount Profit scatterplot displays the correlation between 2 out of the 3 independent variables highlighting the colour of each cluster.     Summary  In a nutshell‚Ä¶We‚Äôve managed to run python in Tableau Desktop locally and started a TabPy server. We can store data as dataframes from any database. Depending on our desired outcome, we may use tables from existing connections (or not), manipulate this data based on our needs and finally blend with the tables placed in our Tableau Data model. The python script should return a dictionary which will be used as the extended table.   References     https://help.tableau.com/current/prep/en-us/prep_scripts_TabPy.htm   https://towardsdatascience.com/tabpy-combining-python-and-tableau-511b10da8175   https://www.tableau.com/blog/release-data-guide-table-extensions-dynamic-zone-visibility   https://help.tableau.com/current/pro/desktop/en-us/td_table_extensions.htm  ","categories": [],
        "tags": ["tableau","python","tabpy"],
        "url": "/Run-python-scripts-with-Tableau-Table-Extension/",
        "teaser": null
      },]
